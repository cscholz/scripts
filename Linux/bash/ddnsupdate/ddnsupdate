#!/bin/bash
Version=2020919.01

# Description:
# Script queried dns ip of given fqdn an compares these with the current public ip of the device.
# If it is the same a stat file is writen. Next try if the file gets older then 10 minutes.
#
# Requiremets: Subdomain like ddns.cscholz.io and a authorized key to write entries
#
# Variables:
# ${DNS_RECORD}:     fqdn to write
# ${DNS_ZONE}:       dns zone to write server
# ${DNS_SERVER}:     dns server to query and use for nsupdate
# ${DNS_KEY_FILE}:   key file to authenticate for with write permissions
# ${DNS_TTL}:        max dns ttl to write
# ${IP_DETECT_URL}:  URL must send public ip in plaintext
# ${PRE_UPDATE_CMD}: any command to run before the update command
# ${MTIME}:          mtime used for search command
#
# Style-Guide: https://google.github.io/styleguide/shell.xml#Case_statement

set -eo pipefail
# -e: exit immidiately when a command fails. If piped check only the last command error code.
#     Use ||true for commands allowed to fail.
# -u: treat unset variable as an error and exit immidiately
# -o pipefail: same as -e but for all commands in a pipe.
# -x: debug option

DNS_RECORD="${1}.${2}"
DNS_ZONE="${2}"
DNS_SERVER="${3}"
DNS_KEY_FILE="${4}"
DNS_TTL="60"
IP_DETECT_URL="${5}"
PRE_UPDATE_CMD=""
UPDATE=0
MTIME=+1

RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;33m'


run_self_update() {
  #######################################
  # Download a new copy of myself and replace myself with it
  # Arguments:
  #   $1 $0 (script name)
  #   $2 update where the new version is stored
  # Returns:
  #   None
  #######################################

  self=${1}

  # The base location from where to retrieve new versions of this script
  update_base=${2}

  echo "> Performing self-update..."

  # Download new version
  echo -n "> Downloading latest version..."
  if ! wget --quiet --output-document="${0}.tmp" "${update_base}/${self}" ; then
    echo "Failed: Error while trying to wget new version!"
    echo "File requested: ${update_base}/${self}"
    exit 1
  fi
  echo "Done."

  # Download MD5 of update
  echo -n "> Downloading md5 sum..."
  if ! wget --quiet --output-document="${0}.md5" "${update_base}${self}.md5" ; then
    echo "Failed: Error while trying to wget md5sum!"
    echo "File requested: ${update_base}${self}.md5"
    exit 1
  fi
  echo "Done."

  # Checking MD5 sum
  echo -n "> Checking MD5 sum..."
  web_md5=$(cat ${0}.md5 | awk '{print $1}')
  local_md5=$(md5sum $(realpath ${0}.tmp) | awk '{print $1}')
  if [[ $web_md5 != "${local_md5}" ]]; then
    echo "Failed. Abort!"
    echo "${web_md5} / ${local_md5}"
    rm "${0}.md5"
    exit 0
  fi
  echo "Ok"
  rm "${0}.md5"

  # Copy over modes from old version
  OCTAL_MODE=$(stat -c '%a' $(realpath ${0}))
  if ! chmod ${OCTAL_MODE} "${0}.tmp" ; then
    echo "Failed: Error while trying to set mode on ${0}.tmp."
    exit 1
  fi

  # Spawn update script
  cat > updateScript.sh << EOF
#!/bin/bash
# Overwrite old file with new
if mv "${0}.tmp" "${0}"; then
  echo "Done. Update complete."
  rm \${0}
else
  echo "Failed. Please try again!"
  rm \${0}
fi
EOF

  echo -n "> Start update process..."
  exec /bin/bash updateScript.sh
}

check_self_update() {
  #######################################
  # Check for a new version of myself
  # Arguments:
  #   $1 $0 (script name)
  # Returns:
  #   None
  #######################################

  self=$(basename "${0}")
  # The base location from where to retrieve new versions of this script
  local update_base=https://raw.githubusercontent.com/cscholz/scripts/master/Linux/bash/ddnsupdate/

  local myself_web_version
  myself_web_version=$(curl -s -r 0-50 "${update_base}${self}" | head -2 | egrep -o "([0-9.]{1,4}+\.[0-9.]{1,2})" )
  echo "Web:  " "${myself_web_version}"
  myself_local_version=$(head -2 "${0}"  | egrep -o "([0-9.]{1,4}+)")
  echo "Local:" "${myself_local_version}"
  if [[ "${myself_web_version}"  > "${myself_local_version}" ]]; then
    echo -e "\033[40;1;33mNew version (v.${myself_local_version} -> v.${myself_web_version}) available.\033[0m"
          read -p "Update (y/N) " -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      run_self_update "${self}" "${update_base}"
    fi
  else
          echo "No update available (v.${myself_local_version})"
        fi
}

function check_nsupdate {
  #######################################
  # Checks if package nsupdate is installed
  # Arguments:
  #   None
  # Returns:
  #   None
  #######################################

  REPLY="y"
  if ! which nsupdate > /dev/null; then
#     echo -e "Package \"bind\" not found! Install? (y/N) \c"
#     read REPLY
     if [ -z ${REPLY} ]; then
       REPLY="n"
     fi
     if [ ${REPLY} = "y" ]; then
        apt-get install dnsutils
     else
       exit
    fi
  fi
}

debug() {
  if [ "$debug" = "1" ]; then
    echo
    echo -e "${YELLOW}\$ $@${NC}"
  fi
}

function dns_update_check {
  #######################################
  # Get public ip from a website
  # Arguments:
  #   1. DNS_RECORD to set
  #   2. DNS_SERVER to be used
  # Returns:
  #   None
  #######################################

  ip=`curl -4 -s -f ${3} | grep -o "[[:digit:].]\+"`
  debug "curl -4 -s -f ${3} | grep -o \"[[:digit:].]\+\""

  echo Public IP: \ \ ${ip}

  if [ -z "${ip}" ]; then
    echo "Can't get the public IP, no Internet connection?"
    logger -t "ddnsupdate" "Can't get the public IP, no Internet connection"
    exit 1
  fi

  echo A-Record:\ \ \ \ ${1}

  debug "host ${1} ${2} | grep \"has address\" | awk '{print $4}'"

  if ! DNS_IP=$(host ${1} ${2} | grep "has address" | awk '{print $4}') >/dev/null 2>&1 ; then
    echo DNS IP:\ \ \ \ \ \ Not present. Forcing update!
    logger -t "ddnsupdate" "A record $2 not found. Forcing update!"
    UPDATE=1
  else
      echo DNS IP:\ \ \ \ \ \ ${DNS_IP}
  fi


  if [ "${DNS_IP}" != "${ip}" ]; then
    echo "DDNS-Status: Need update (DNS=${DNS_IP}, IP=${ip})"
    logger -t "ddnsupdate" "Need update. (DNS=${DNS_IP}, IP=${ip})"
    #some preupdate commands?
    ${PRE_UPDATE_CMD}
    #creating /usr/bin/nsupdate commands
    commands="server ${DNS_SERVER}\nzone ${DNS_ZONE}\n"
    for i in ${DNS_RECORD}; do
#      commands="$commands\nupdate delete ${i} A\nupdate add ${i} ${DNS_TTL} A ${ip}\n"
       commands="${commands}\nupdate delete ${i} A\nupdate add ${i} ${DNS_TTL} A ${ip}\nupdate delete ${i} txt\nupdate add ${i} $DNS_TTL TXT \"$(date +%d.%m.%Y,\ %H:%M:%S\ %Z\ \(%:::z\))\"\n"
    done

   debug "${commands} | /usr/bin/nsupdate -k ${DNS_KEY_FILE}"
    commands="${commands}\nsend\n"
    #running dns update
    echo -e "${commands}" | /usr/bin/nsupdate -k ${DNS_KEY_FILE}

    nsupdate_status=${?}
   #checking nsupdate exit status
    if [ ${nsupdate_status} -ne 0 ]; then
      echo "DNS update failed! Wrong configuration?"
      logger -t "ddnsupdate" "DNS update failed! Wrong configuration?"
#      exit 1
    else
      logger -t "ddnsupdate" "${DNS_RECORD} updated to ${ip}."
      echo Action:\ \ \ \ \ \ Updated to ${ip}
      #writing our ip to state file
    fi
  else
    echo "DDNS-Status: Update not neccessary (DNS=${DNS_IP}, IP=${ip})"
    logger -t "ddnsupdate" "Update not neccessary. (DNS=${DNS_IP}, IP=${ip})"
    exit 1
  fi
}

main() {
  for i in "$@" ; do
    if [[ "${i}" == "-u" ]] ; then
      check_self_update
      exit 1
    fi
    if [[ "${i}" == "-v" ]] ; then
      debug=1
    fi
  done

  if [ -z "$5" ] ; then
    echo "Usage:  $0 {a-record} {dns-zone.tld} {dns-server} {/path/to/dns.key} {http://ifconfig.me/ip}"
    echo "Debug:  $0 {a-record} {dns-zone.tld} {dns-server} {/path/to/dns.key} {http://ifconfig.me/ip} -v"
    echo "Update: $0 -u"
    exit 1
  fi

  debug "Run function check_nsupdate()"
  check_nsupdate

  debug "Run function dns_update_check(${DNS_RECORD} ${DNS_SERVER} ${IP_DETECT_URL})"
  dns_update_check ${DNS_RECORD} ${DNS_SERVER} ${IP_DETECT_URL}
}

main "$@"

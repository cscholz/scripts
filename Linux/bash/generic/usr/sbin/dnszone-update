#!/bin/bash
Version=20240625.03

set -eo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'
BOLD='\033[1m'
NOBOLD='\033[0m'

CHECKMARK="✓"
CROSSMARK="✗"

dns_server=""
dns_key=""
ip_detect_url=""
record_type="A"
ttl="3600"
dns_class="IN"
ip_version="ipv4"
use_public_ip_target=0
debug_mode=0
target_value=""
pre_update_cmd=""
auto_overwrite_existing_records="n"

CONFIG_FILE="/etc/ddnsupdate.conf"
USER_CONFIG="$HOME/.config/ddnsupdate.conf"

# Load config
if [ -f "$CONFIG_FILE" ]; then
  source "$CONFIG_FILE"
fi
if [ -f "$USER_CONFIG" ]; then
  source "$USER_CONFIG"
fi

print_aligned() {
  local key="$1"
  local value="$2"
  printf "%-15s %s\n" "$key:" "$value"
}

debug() {
  if [ "$debug_mode" = "1" ]; then
    echo -e "${YELLOW}> $*${NC}" >&2
  fi
}

checkpackage() {
  local exec="$1"
  local pkg="$2"
  if ! command -v "$exec" >/dev/null 2>&1; then
    echo -e "${RED}Package \"$pkg\" not found!${NC}"
    read -p "Install? (y/N) " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      sudo apt-get update
      sudo apt-get install -y "$pkg"
    else
      exit 1
    fi
  fi
}

check_key_permissions() {
  local keyfile="$1"
  if [ ! -f "$keyfile" ]; then
    echo -e "${RED}Key file does not exist: $keyfile${NC}"
    exit 1
  fi
  local perms
  perms=$(stat -c "%a" "$keyfile")
  if [ "$perms" != "600" ]; then
    echo -e "${RED}Key file $keyfile must have permissions 0600 (current: $perms). No updates performed!${NC}"
    exit 1
  fi
}

usage() {
  echo -e "\033[1;4m1. Usage:\033[0m"
  echo "   ddnsupdate [Global Parameter] <command> [Parameter] [Arguments...]"
  echo
  echo -e "\033[1;4m2. Config:\033[0m"
  echo "   - /etc/ddnsupdate.conf (global, system-wide)"
  echo "   - ~/.config/ddnsupdate.conf (user-specific)"
  echo "   User config overrides global config."
  echo "   CLI parameters override both config files."
  echo
  echo -e "\033[1;4m3. Global Parameter:\033[0m"
  echo "   -u             Self-update"
  echo "   --help         Show this help"
  echo "   -v             Debug mode (show commands and variables in yellow)"
  echo
  echo -e "\033[1;4m4. Commands:\033[0m"
  echo "   # Zone commands"
  echo "   soa-get <Zone>                           Show SOA record for the zone (nicely formatted)"
  echo "   soa-set <Zone> [primary] [email] [serial] [refresh] [retry] [expire] [minimum]"
  echo "                                            Set all SOA parameters for a zone. Old SOA will be replaced."
  echo "   soa-set-serial <Zone> <serial>           Update only the SOA serial for the zone"
  echo "   soa-set-refresh <Zone> <refresh>         Update only the SOA refresh value"
  echo "   soa-set-retry <Zone> <retry>             Update only the SOA retry value"
  echo "   soa-set-expire <Zone> <expire>           Update only the SOA expire value"
  echo "   soa-set-minimum <Zone> <minimum>         Update only the SOA minimum value"
  echo "   listzone <Zone>                          List all records of a DNS zone (zone transfer/AXFR, DNSSEC entries filtered)"
  echo "                                            Only the first dig output block is shown. DNSSEC (RRSIG/NSEC/DNSKEY) entries are excluded."
  echo "                                            Note: Only possible if the DNS server allows AXFR for your client IP."
  echo "   listzone_full <Zone>                     List all records of a DNS zone (zone transfer/AXFR, all records, no filtering)"
  echo
  echo "   # Record commands"
  echo "   add <Record Name> <Zone>                 Add or update a DNS record"
  echo "   del <Record Name> <Zone>                 Delete a DNS record"
  echo "   check <Record Name> <Zone>               Show DNS record and TXT record for a name"
  echo
  echo -e "\033[1;4m5a. Zone Parameter:\033[0m"
  echo "   For soa-set and subcommands:"
  echo "     primary      Primary nameserver for the zone (default: ns1.<zone>.)"
  echo "     email        Email address for the zone (default: hostmaster.<zone>.)"
  echo "     serial       Serial number (default: YYYYMMDD01)"
  echo "     refresh      Refresh interval (default: 86400)"
  echo "     retry        Retry interval (default: 7200)"
  echo "     expire       Expire value (default: 3600000)"
  echo "     minimum      Minimum TTL (default: 172800)"
  echo
  echo -e "\033[1;4m5b. Zone Examples:\033[0m"
  echo "   1) \$ ddnsupdate soa-get example.com"
  echo "   2) \$ ddnsupdate soa-set example.com ns1.example.com. hostmaster.example.com. 2024062501 3600 600 86400 60"
  echo "   3) \$ ddnsupdate soa-set-serial example.com 2024062502"
  echo "   4) \$ ddnsupdate soa-set-refresh example.com 7200"
  echo "   5) \$ ddnsupdate listzone example.com"
  echo
  echo -e "\033[1;4m6a. Record Parameter:\033[0m"
  echo "   -dns-server <server>      DNS server to use (default from config)"
  echo "   -key <keyfile>            Path to nsupdate key (default from config)"
  echo "   -ip-detect <url>          URL to retrieve public IP (default: https://api.ipify.org)"
  echo "   -type <recordtype>        DNS record type (A, AAAA, MX, NS, TXT, etc.; default: A)"
  echo "   -ttl <seconds>            TTL for the record (default: 3600)"
  echo "   -class <class>            DNS class (default: IN)"
  echo "   -ipv4                     Use IPv4 (default)"
  echo "   -ipv6                     Use IPv6"
  echo "   -target-public-ip         Use your current public IP as the target value (A/AAAA)"
  echo "   -target <value>           Set target value for record (e.g. for MX, NS, TXT, CNAME, SRV, PTR)"
  echo "   -y                        Automatically overwrite existing records (default: n)"
  echo
  echo -e "\033[1;4m6b. Record Examples:\033[0m"
  echo "   1) dynip.example.com. 3600 IN A 203.0.113.42"
  echo "      \$ ddnsupdate add dynip example.com"
  echo
  echo "   2) example.sclz.eu. 60 IN A 198.51.100.42"
  echo "      \$ ddnsupdate add example sclz.eu -target-public-ip -ttl 60"
  echo
  echo "   3) example.sclz.eu. 3600 IN TXT \"v=spf1 include:_spf.example.com ~all\""
  echo "      \$ ddnsupdate add example sclz.eu -type TXT -target '\"v=spf1 include:_spf.example.com ~all\"'"
  echo
  echo "   4) www.sclz.eu. 3600 IN CNAME example.com."
  echo "      \$ ddnsupdate add www sclz.eu -type CNAME -ttl 3600 -class IN -dns-server mx02.o-o-s.de -key /root/scripts/ddnsupdate.key -target \"example.com.\""
  echo
  echo "   5) sclz.eu. 3600 IN MX 10 mail.example.com."
  echo "      \$ ddnsupdate add @ sclz.eu -type MX -target \"10 mail.example.com.\""
  echo
}

get_zone_soa() {
    local zone="$1"
    local server="${dns_server}"
    checkpackage dig dnsutils
    debug dig +short SOA "${zone}." @"${server}"
    local soa
    soa=$(dig +short SOA "${zone}." @"${server}")
    if [ -z "$soa" ]; then
        echo -e "${RED}${BOLD}[x]${NC}${NOBOLD} No SOA record found for zone ${zone}.${NC}"
        return 1
    fi
    local primary email serial refresh retry expire minimum
    read -r primary email serial refresh retry expire minimum <<<"$soa"
    printf "%-12s: %s\n" "Primary" "$primary"
    printf "%-12s: %s\n" "Email"   "$email"
    printf "%-12s: %s\n" "Serial"  "$serial"
    printf "%-12s: %s\n" "Refresh" "$refresh"
    printf "%-12s: %s\n" "Retry"   "$retry"
    printf "%-12s: %s\n" "Expire"  "$expire"
    printf "%-12s: %s\n" "Minimum" "$minimum"
}

set_zone_soa() {
    local zone="$1"
    local primary="$2"
    local email="$3"
    local serial="$4"
    local refresh="$5"
    local retry="$6"
    local expire="$7"
    local minimum="$8"
    local server="${dns_server}"
    local key="${dns_key}"
    local class="IN"
    checkpackage nsupdate dnsutils
    [ -z "$primary" ] && primary="ns1.${zone}."
    [ -z "$email" ] && email="hostmaster.${zone}."
    [ -z "$serial" ] && serial="$(date +%Y%m%d)01"
    [ -z "$refresh" ] && refresh=86400
    [ -z "$retry" ] && retry=7200
    [ -z "$expire" ] && expire=3600000
    [ -z "$minimum" ] && minimum=172800

    commands="server ${server}\nzone ${zone}\n"
    commands="${commands}update delete ${zone}. ${class} SOA\n"
    commands="${commands}update add ${zone}. 3600 ${class} SOA ${primary} ${email} ${serial} ${refresh} ${retry} ${expire} ${minimum}\n"
    commands="${commands}send\n"
    debug echo -e "${commands}" "| /usr/bin/nsupdate -k ${key}"
    echo -e "${commands}" | /usr/bin/nsupdate -k "${key}"

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}${BOLD}[✓]${NOBOLD} SOA updated for zone ${zone}.${NC}"
    else
        echo -e "${RED}${BOLD}[x]${NOBOLD} SOA update failed for zone ${zone}.${NC}"
    fi
}

set_zone_soa_serial() {
    local zone="$1"
    local new_serial="$2"
    local server="${dns_server}"
    checkpackage dig dnsutils
    local old_soa primary email serial refresh retry expire minimum
    debug dig +short SOA "${zone}." @"${server}"
    old_soa=$(dig +short SOA "${zone}." @"${server}")
    if [ -z "$old_soa" ]; then echo "No SOA found!"; return 1; fi
    read -r primary email serial refresh retry expire minimum <<<"$old_soa"
    set_zone_soa "$zone" "$primary" "$email" "$new_serial" "$refresh" "$retry" "$expire" "$minimum"
}

set_zone_soa_refresh() {
    local zone="$1"
    local new_refresh="$2"
    local server="${dns_server}"
    checkpackage dig dnsutils
    local old_soa primary email serial refresh retry expire minimum
    debug dig +short SOA "${zone}." @"${server}"
    old_soa=$(dig +short SOA "${zone}." @"${server}")
    if [ -z "$old_soa" ]; then echo "No SOA found!"; return 1; fi
    read -r primary email serial refresh retry expire minimum <<<"$old_soa"
    set_zone_soa "$zone" "$primary" "$email" "$serial" "$new_refresh" "$retry" "$expire" "$minimum"
}

set_zone_soa_retry() {
    local zone="$1"
    local new_retry="$2"
    local server="${dns_server}"
    checkpackage dig dnsutils
    local old_soa primary email serial refresh retry expire minimum
    debug dig +short SOA "${zone}." @"${server}"
    old_soa=$(dig +short SOA "${zone}." @"${server}")
    if [ -z "$old_soa" ]; then echo "No SOA found!"; return 1; fi
    read -r primary email serial refresh retry expire minimum <<<"$old_soa"
    set_zone_soa "$zone" "$primary" "$email" "$serial" "$refresh" "$new_retry" "$expire" "$minimum"
}

set_zone_soa_expire() {
    local zone="$1"
    local new_expire="$2"
    local server="${dns_server}"
    checkpackage dig dnsutils
    local old_soa primary email serial refresh retry expire minimum
    debug dig +short SOA "${zone}." @"${server}"
    old_oa=$(dig +short SOA "${zone}." @"${server}")
    if [ -z "$old_oa" ]; then echo "No SOA found!"; return 1; fi
    read -r primary email serial refresh retry expire minimum <<<"$old_oa"
    set_zone_soa "$zone" "$primary" "$email" "$serial" "$refresh" "$retry" "$new_expire" "$minimum"
}

set_zone_soa_minimum() {
    local zone="$1"
    local new_minimum="$2"
    local server="${dns_server}"
    checkpackage dig dnsutils
    local old_soa primary email serial refresh retry expire minimum
    debug dig +short SOA "${zone}." @"${server}"
    old_soa=$(dig +short SOA "${zone}." @"${server}")
    if [ -z "$old_soa" ]; then echo "No SOA found!"; return 1; fi
    read -r primary email serial refresh retry expire minimum <<<"$old_soa"
    set_zone_soa "$zone" "$primary" "$email" "$serial" "$refresh" "$retry" "$expire" "$new_minimum"
}

list_zone() {
  checkpackage dig dnsutils
  local zone="$1"
  local server="${dns_server}"
  echo "Attempting AXFR zone transfer for: $zone @ $server"
  echo "Note: This only works if the DNS server allows AXFR for your client IP."
  debug dig "$zone" "AXFR" "@" "$server"
  dig "$zone" AXFR @"$server" | egrep -vi '(rrsig|nsec|dnskey)' | awk '!seen[$0]++'
}

list_zone_full() {
  checkpackage dig dnsutils
  local zone="$1"
  local server="${dns_server}"
  echo "Attempting AXFR zone transfer for: $zone @ $server"
  echo "Note: This only works if the DNS server allows AXFR for your client IP."
  debug dig "$zone" "AXFR" "@" "$server"
  dig "$zone" AXFR @"$server" | awk '!seen[$0]++'
}

check_record() {
  checkpackage dig dnsutils
  local record="$1"
  local zone="$2"
  local fqdn="${record}.${zone}"
  local type="${record_type}"
  local server="${dns_server}"

  echo "Checking DNS records for: ${fqdn}"
  echo "-----------------------------------"
  print_aligned "$type" "$(dig $type ${fqdn} @${server} +short 2>/dev/null | head -n1 || echo "n/a")"
  print_aligned "TXT" "$(dig TXT ${fqdn} @${server} +short 2>/dev/null | head -n1 || echo "n/a")"
  echo "-----------------------------------"
}

dns_add_update() {
  checkpackage nsupdate dnsutils
  checkpackage curl curl
  local record="$1"
  local zone="$2"
  local fqdn="${record}.${zone}."
  local type="${record_type}"
  local server="${dns_server}"
  local key="${dns_key}"
  local url="${ip_detect_url}"
  local ttl_val="${ttl}"
  local class="${dns_class}"
  local iptype="${ip_version}"
  local update=0

  check_key_permissions "$key"

  # Target bestimmen
  local value=""
  if [ -n "$target_value" ]; then
    value="$target_value"
  elif [[ "$use_public_ip_target" -eq 1 || "$type" == "A" || "$type" == "AAAA" ]]; then
    if [ "$type" = "AAAA" ] || [ "$iptype" = "ipv6" ]; then
      IPvX="6"
    else
      IPvX="4"
    fi
    debug curl --connect-timeout 2 -${IPvX} --silent -f "${url}"
    ip=$(curl --connect-timeout 2 -${IPvX} --silent -f "${url}")
    print_aligned "Public IPv${IPvX}" "$ip"
    if [ -z "${ip}" ]; then
      echo "Could not determine public IP. No internet connection?"
      logger -t "ddnsupdate" "Could not determine public IP. No internet connection?"
      return 1
    fi
    value="$ip"
  fi

  echo "-----------------------------------------"
  print_aligned "DNS Zone"       "$zone"
  print_aligned "Record"         "$record"
  print_aligned "Type"           "$type"
  print_aligned "Class"          "$class"
  print_aligned "Target"         "$value"
  print_aligned "TTL"            "$ttl_val"
  print_aligned "FQDN"           "$fqdn"
  echo "-----------------------------------------"

  debug dig "$type" "${fqdn%?}" "@" "$server" "+short"
  DNS_VAL=$(dig "$type" "${fqdn%?}" @"$server" +short 2>/dev/null || true)

  # Prüfe, ob Ziel-IP mit alter IP identisch ist
  if [ "${DNS_VAL}" = "${value}" ] && [ -n "${DNS_VAL}" ]; then
    echo "[-] Same target; not updated"
    return 0
  fi

  # Existiert der Record bereits?
  if [ -n "${DNS_VAL}" ]; then
    if [ "$auto_overwrite_existing_records" = "y" ]; then
      echo -e "${BOLD}[✓]${NOBOLD} Automatically overwriting existing record."
      commands="server ${server}\nzone ${zone}\n"
      commands="${commands}update delete ${fqdn%?} ${class} ${type}\n"
      commands="${commands}send\n"
      debug echo -e "${commands}" "| /usr/bin/nsupdate -k ${key}"
      echo -e "${commands}" | /usr/bin/nsupdate -k "${key}"
      update=1
    else
      echo -en "${YELLOW}${BOLD}[?]${NOBOLD}${YELLOW}${NC} "
      read -p "Delete existing record before adding new one? (y/N) " -r
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        commands="server ${server}\nzone ${zone}\n"
        commands="${commands}update delete ${fqdn%?} ${class} ${type}\n"
        commands="${commands}send\n"
        debug echo -e "${commands}" "| /usr/bin/nsupdate -k ${key}"
        echo -e "${commands}" | /usr/bin/nsupdate -k "${key}"
        update=1
      else
        return 0
      fi
    fi
  fi

  # Wenn value leer, Standardwert je nach Typ
  if [[ -z "$value" ]]; then
    case "$type" in
      MX)
        value="10 mail.${zone}."
        ;;
      NS)
        value="ns1.${zone}."
        ;;
      TXT)
        value="\"$(date +%d.%m.%Y,\ %H:%M:%S\ %Z\ \(%:::z\))\""
        ;;
      CNAME)
        value="${zone}."
        ;;
      SRV)
        value="10 60 5060 sipserver.${zone}."
        ;;
      PTR)
        value="${zone}."
        ;;
      *)
        value="$ip"
        ;;
    esac
  fi

  if [ "${DNS_VAL}" != "${value}" ] || [ "${update}" -eq 1 ]; then
    logger -t "ddnsupdate" "Update required. (DNS=${DNS_VAL}, IP=${ip})"
    ${pre_update_cmd}

    commands="server ${server}\nzone ${zone}\n"
    commands="${commands}update delete ${fqdn%?} ${class} ${type}\n"
    commands="${commands}update add ${fqdn%?} ${ttl_val} ${class} ${type} ${value}\n"
    # TXT-Record nur bei -target-public-ip setzen
    if [ "${use_public_ip_target}" -eq 1 ]; then
      commands="${commands}update delete ${fqdn%?} ${class} TXT\n"
      commands="${commands}update add ${fqdn%?} ${ttl_val} ${class} TXT \"$(date +%d.%m.%Y,\ %H:%M:%S\ %Z\ \(%:::z\))\"\n"
    fi
    commands="${commands}send\n"

    debug echo -e "${commands}" "| /usr/bin/nsupdate -k ${key}"
    echo -e "${commands}" | /usr/bin/nsupdate -k "${key}"

    nsupdate_status=${?}
    if [ ${nsupdate_status} -ne 0 ]; then
      echo -e "${RED}${BOLD}[✗]${NOBOLD} DNS update failed!${NC}"
      logger -t "ddnsupdate" "DNS update failed! Wrong configuration?"
      return 1
    else
      echo -e "${GREEN}${BOLD}[✓]${NOBOLD} Updated to ${value}"
      logger -t "ddnsupdate" "${fqdn%?} updated to ${value}."
    fi
  else
    print_aligned "DDNS-Status" "Update not necessary (DNS=${DNS_VAL}, IP=${ip})"
    logger -t "ddnsupdate" "Update not necessary. (DNS=${DNS_VAL}, IP=${ip})"
  fi
}

dns_del_record() {
  checkpackage nsupdate dnsutils
  checkpackage dig dnsutils
  local record="$1"
  local zone="$2"
  local fqdn="${record}.${zone}."
  local type="${record_type}"
  local server="${dns_server}"
  local key="${dns_key}"
  local class="${dns_class}"

  check_key_permissions "$key"

  any_record=""
  if [ -n "$(dig "$type" ${fqdn%?} @"$server" +short 2>/dev/null)" ]; then
    any_record="$type"
  fi
  if [ -n "$(dig TXT ${fqdn%?} @"$server" +short 2>/dev/null)" ]; then
    any_record="${any_record:+$any_record, }TXT"
  fi

  if [ -z "$any_record" ]; then
    echo -e "${BOLD}[x]${NOBOLD} No records present for ${fqdn}. No deletion necessary."
    return 0
  fi

  commands="server ${server}\nzone ${zone}\n"
  commands="${commands}update delete ${fqdn%?} ${class} ${type}\n"
  commands="${commands}update delete ${fqdn%?} ${class} TXT\n"
  commands="${commands}send\n"

  debug echo -e "${commands}" "| /usr/bin/nsupdate -k ${key}"
  echo -e "${commands}" | /usr/bin/nsupdate -k "${key}"

  nsupdate_status=${?}
  if [ ${nsupdate_status} -ne 0 ]; then
    echo -e "${RED}${BOLD}[✗]${NOBOLD} DNS deletion failed for ${fqdn}${NC}"
    logger -t "ddnsupdate" "DNS deletion failed! Wrong configuration?"
    return 1
  else
    echo -e "${GREEN}${BOLD}[✓]${NOBOLD} ${type}/TXT record for ${fqdn} deleted"
    logger -t "ddnsupdate" "${fqdn} ${type}/TXT record deleted."
  fi
}

run_self_update() {
    checkpackage wget wget
    local self="$1"
    local update_base="${UPDATE_BASE:-https://to_be_set/}"
    local script_path
    script_path=$(realpath "$0" 2>/dev/null || echo "$0")
    local script_name
    script_name=$(basename "$script_path")
    local script_dir
    script_dir=$(dirname "$script_path")

    echo "Performing self-update"

    # Download latest version
    echo -ne "\r[ ] Downloading latest version..."
    if ! wget --quiet --output-document="${script_name}.tmp" "${update_base}/${self}"; then
        echo -e "\r${RED}${BOLD}[✗]${NOBOLD} Downloading latest version${NC}"
        echo -e "${RED}${BOLD}[✗]${NOBOLD} Performing self-update${NC}"
        exit 1
    fi
    echo -e "\r${GREEN}${BOLD}[✓]${NOBOLD} Downloading latest version${NC}"

    # Copy over modes from old version
    echo -ne "\r[ ] Copying over modes from old version..."
    local octal_mode
    octal_mode=$(stat -c '%a' "$script_path" 2>/dev/null || echo "755")
    if ! chmod "$octal_mode" "${script_name}.tmp"; then
        echo -e "\r${RED}${BOLD}[✗]${NOBOLD} Copying over modes from old version${NC}"
        echo -e "${RED}${BOLD}[✗]${NOBOLD} Performing self-update${NC}"
        exit 1
    fi
    echo -e "\r${GREEN}${BOLD}[✓]${NOBOLD} Copying over modes from old version${NC}"

    # Start update process
    echo -ne "\r[ ] Start update process..."
    cat > updateScript.sh <<EOF
#!/bin/bash
if mv "${script_name}.tmp" "${script_path}"; then
    printf "\r\033[0KUpdate complete.\n"
    rm -f "\${0}"
else
    printf "\r\033[0KUpdate failed. Please try again!\n"
    rm -f "\${0}"
fi
EOF
    chmod +x updateScript.sh
    exec /bin/bash updateScript.sh
}

check_self_update() {
    self=$(basename "${0}")
    local update_base="${UPDATE_BASE:-https://to_be_set/}"
    local myself_web_version
    myself_web_version=$(curl -s -r 0-50 "${update_base}${self}" | head -2 | grep -E -o "([0-9.]{1,4}+\.[0-9.]{1,2})" || true)
    if [ -z "$myself_web_version" ]; then
        echo -e "[${RED}${BOLD}x${NC}${NOBOLD}] No online version found for ${self} at ${update_base}${self}."
        exit 1
    fi
    echo "Web version: ${myself_web_version}"
    myself_local_version=$(head -2 "${0}" | grep -E -o "([0-9.]{1,4}+)")

    echo "Local version: ${myself_local_version}"
    if [[ "${myself_web_version}" > "${myself_local_version}" ]]; then
        echo -e "${YELLOW}New version v.${myself_local_version} to v.${myself_web_version} available.${NC}"
        read -p "Update [y/N] " -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            run_self_update "${self}" "${update_base}"
        fi
    else
        echo "No update available: v.${myself_local_version}"
    fi
}

main() {
  if [ $# -lt 1 ]; then
    usage
  fi

  if [ "$1" = "--help" ]; then
    usage
  fi

  if [ "$1" = "-u" ]; then
    check_self_update
    exit 0
  fi

  local action="$1"
  shift

  local record=""
  local zone=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -dns-server)
        dns_server="$2"
        shift 2
        ;;
      -key)
        dns_key="$2"
        shift 2
        ;;
      -ip-detect)
        ip_detect_url="$2"
        shift 2
        ;;
      -type)
        record_type="$2"
        shift 2
        ;;
      -ttl)
        ttl="$2"
        shift 2
        ;;
      -class)
        dns_class="$2"
        shift 2
        ;;
      -ipv4)
        ip_version="ipv4"
        shift
        ;;
      -ipv6)
        ip_version="ipv6"
        shift
        ;;
      -target-public-ip)
        use_public_ip_target=1
        shift
        ;;
      -target)
        target_value="$2"
        shift 2
        ;;
      -v)
        debug_mode=1
        shift
        ;;
      -y)
        auto_overwrite_existing_records="y"
        shift
        ;;
      *)
        if [ -z "$record" ]; then
          record="$1"
        elif [ -z "$zone" ]; then
          zone="$1"
        else
          usage
        fi
        shift
        ;;
    esac
  done

  : "${dns_server:=${DNS_SERVER}}"
  : "${dns_key:=${DNS_KEY}}"
  : "${ip_detect_url:=${IP_DETECT_URL:-https://api.ipify.org}}"

  if [[ -z "$dns_server" || -z "$dns_key" ]]; then
    usage
  fi

  checkpackage nsupdate dnsutils

  case "$action" in
    add)
      dns_add_update "$record" "$zone"
      ;;
    del)
      dns_del_record "$record" "$zone"
      ;;
    check)
      check_record "$record" "$zone"
      ;;
    soa-get)
      get_zone_soa "$record"
      ;;
    soa-set)
      set_zone_soa "$record" "$zone" "$3" "$4" "$5" "$6" "$7" "$8"
      ;;
    soa-set-serial)
      set_zone_soa_serial "$record" "$zone"
      ;;
    soa-set-refresh)
      set_zone_soa_refresh "$record" "$zone"
      ;;
    soa-set-retry)
      set_zone_soa_retry "$record" "$zone"
      ;;
    soa-set-expire)
      set_zone_soa_expire "$record" "$zone"
      ;;
    soa-set-minimum)
      set_zone_soa_minimum "$record" "$zone"
      ;;
    listzone)
      list_zone "$record"
      ;;
    listzone_full)
      list_zone_full "$record"
      ;;
    *)
      usage
      ;;
  esac
}

main "$@"

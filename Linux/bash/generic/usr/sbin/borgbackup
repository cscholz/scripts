#!/bin/bash
# Version=20250609.01

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m'

GLOBAL_CONFIG="/etc/borgbackup.conf"
USER_CONFIG="$HOME/.config/borgbackup/borgbackup.conf"

variables_initialized=false

# --- Logging ---
log_status() {
    local msg="$1"
    local newline="${2:-0}" # 0 = keine neue Zeile, 1 = mit neuer Zeile
    if [[ "$newline" == "1" ]]; then
        echo -e "\r$msg"
    else
        echo -ne "\r$msg"
    fi
}

debug_msg() {
    if [[ "$debug" == "1" ]]; then
        log_status "  ${YELLOW}\$ $*${NC}" 1
    fi
}

# --- Config permissions check ---
check_config_permissions() {
    local cfg="$1"
    if [[ -f "$cfg" ]]; then
        local mode
        mode=$(stat -c "%a" "$cfg")
        if [[ "$mode" != "600" ]]; then
            log_status "[${RED}✗${NC}] Config file $cfg must have permissions 0600, but has $mode" 1
            exit 10
        fi
    fi
}

check_config_permissions "$GLOBAL_CONFIG"
check_config_permissions "$USER_CONFIG" 2>/dev/null || true

debug=0

args=()
for arg in "$@"; do
    if [[ "$arg" == "-v" ]]; then
        debug=1
    else
        args+=("$arg")
    fi
done
set -- "${args[@]}"

# --- Config loading ---
config_loaded=0
if [[ -f "$GLOBAL_CONFIG" ]]; then
    source "$GLOBAL_CONFIG"
    config_loaded=1
fi
if [[ -f "$USER_CONFIG" ]]; then
    source "$USER_CONFIG"
    config_loaded=1
fi

if [[ "$config_loaded" -eq 0 ]]; then
    log_status "[${RED}✗${NC}] No configuration file found!" 1
    exit 10
fi

if [[ "${BORG_RELOCATED_REPO_ACCESS_IS_OK:-no}" == "yes" ]]; then
    export BORG_RELOCATED_REPO_ACCESS_IS_OK=yes
fi

if [[ -z "${ssh_remote_host:-}" || -z "${ssh_remote_user:-}" || -z "${ssh_remote_folder:-}" || -z "${borg_backup_name_format:-}" ]]; then
    log_status "[${RED}✗${NC}] No valid configuration found!" 1
    exit 10
fi

run_cmd() {
    local cmd="$*"
    debug_msg "$cmd"
    eval "$cmd"
    return $?
}

tempfile() {
    umask 077
    mktemp "/tmp/$(basename "$0").XXXXXX"
}

escape_mail_subject() {
    printf "%s" "$1" | sed "s/'/'\"'\"'/g"
}

set_variables() {
    local job_name="${1:-full}"
    if [[ "$variables_initialized" == false ]]; then
        export BORG_PASSPHRASE="${borg_passphrase}"
        export BORG_RSH="ssh -p ${ssh_remote_port} -oStrictHostKeyChecking=no -oBatchMode=yes -i ${ssh_remote_authfile}"
        temp=$(tempfile)
        variables_initialized=true
        log_status "[${GREEN}✓${NC}] Variables set for backup job [${job_name}]" 1
        debug_msg "BORG_RSH=${BORG_RSH}"
        debug_msg "temp=${temp}"
    fi
    snapshot_name=$(date +"$borg_backup_name_format" | sed 's/^$(date +%Y-%m-%d)-full//')
    if [[ "$borg_backup_name_format" == *'%'* ]]; then
        snapshot_name=$(date +"$borg_backup_name_format")
    else
        snapshot_name=$(eval echo "$borg_backup_name_format")
    fi
    if [[ -n "${default_backup_prefix:-}" ]]; then
        snapshot_name="${snapshot_name}_${default_backup_prefix}"
    fi
    debug_msg "snapshot_name=${snapshot_name}"
    debug_msg "repo_name=${repo_name:-}"
}

repo_name=$(eval echo "${borg_repo_name_format:-}")
if [[ -n "$repo_name" ]]; then
    repo_path="${ssh_remote_user}@${ssh_remote_host}:${ssh_remote_folder}${repo_name}"
else
    repo_path="${ssh_remote_user}@${ssh_remote_host}:${ssh_remote_folder}"
fi

# --- Backup functions ---
backup_create() {
    local include_path="${1:-}"
    local backup_suffix="${2:-}"
    set_variables "full"
#   repo_lock_check || exit 2
    local msg="[ ] Creating backup"
    log_status "$msg" 1
    local borg_create_opts=(--exclude-caches --exclude-nodump --compression "${compression}" "${exclude_args[@]}")
    local -a include_paths=("${backup_paths[@]}")
    [[ -n "$include_path" ]] && include_paths=("$include_path")
    [[ ${#include_paths[@]} -eq 0 ]] && include_paths=("/")
    if [[ -n "$backup_suffix" ]]; then
        snapshot_name="$(date +"$borg_backup_name_format" | sed 's/^$(date +%Y-%m-%d)-full//')"
        if [[ "$borg_backup_name_format" == *'%'* ]]; then
            snapshot_name="$(date +"$borg_backup_name_format")"
        else
            snapshot_name=$(eval echo "$borg_backup_name_format")
        fi
        snapshot_name="${snapshot_name}_${backup_suffix}"
    fi
    debug_msg "borg create ${borg_create_opts[*]} --stats --progress ${repo_path}::${snapshot_name} ${include_paths[*]}"
    borg create "${borg_create_opts[@]}" --stats --progress "${repo_path}::${snapshot_name}" "${include_paths[@]}"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Creating backup (suffix: ${backup_suffix:-${default_backup_prefix:-none}})" 1
        local report_file
        report_file=$(tempfile)
        debug_msg "borg info ${repo_path}::${snapshot_name} > $report_file"
        borg info "${repo_path}::${snapshot_name}" > "$report_file"
        if [[ -n "${mail_recipient:-}" ]]; then
            local subject="$(hostname) backup - [${snapshot_name}]"
            debug_msg "mail -s \"$subject\" \"${mail_recipient}\" < \"$report_file\""
            mail -s "$subject" "${mail_recipient}" < "$report_file"
        fi
        if [[ -n "${heartbeat_success_url:-}" ]]; then
            debug_msg "curl -sS \"${heartbeat_success_url}\""
            if curl -sS "${heartbeat_success_url}" >/dev/null; then
                log_status "[${GREEN}✓${NC}] Sending heartbeat" 1
            else
                log_status "[${RED}✗${NC}] Sending heartbeat" 1
            fi
        fi
        rm -f "$report_file"
    else
        log_status "[${RED}✗${NC}] Creating backup (suffix: ${backup_suffix:-${default_backup_prefix:-none}})" 1
        if [[ -n "${heartbeat_failure_url:-}" ]]; then
            debug_msg "curl -sS \"${heartbeat_failure_url}\""
            if curl -sS "${heartbeat_failure_url}" >/dev/null; then
                log_status "[${GREEN}✓${NC}] Sending heartbeat" 1
            else
                log_status "[${RED}✗${NC}] Sending heartbeat" 1
            fi
        fi
        exit 2
    fi
}

backup_delete() {
    local archive_name="$1"
    set_variables "full"
    if [[ -z "$archive_name" ]]; then
        log_status "[${RED}✗${NC}] No archive name specified for deletion!" 1
        exit 2
    fi
    local msg="[ ] Deleting backup $archive_name"
    log_status "$msg"
    debug_msg "borg delete -v ${repo_path}::${archive_name}"
    local mailfile
    mailfile=$(tempfile)
    echo "----- Repository Info BEFORE deletion -----" >> "$mailfile"
    echo "Backup to be deleted: ${archive_name}" >> "$mailfile"
    borg info "$repo_path" >> "$mailfile"
    echo >> "$mailfile"
    borg delete -v "${repo_path}::${archive_name}"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Deleting backup $archive_name" 1
        echo "----- Repository Info AFTER deletion -----" >> "$mailfile"
        borg info "$repo_path" >> "$mailfile"
        if [[ -n "${mail_recipient:-}" ]]; then
            local subject="$(hostname) backup deleted - [${archive_name}]"
            debug_msg "mail -s \"$subject\" \"${mail_recipient}\" < \"$mailfile\""
            mail -s "$subject" "${mail_recipient}" < "$mailfile"
        fi
    else
        log_status "[${RED}✗${NC}] Deleting backup $archive_name" 1
        exit 2
    fi
    rm -f "$mailfile"
}

backup_list_and_mail() {
    set_variables "full"
    local msg="[ ] Listing all backups"
    log_status "$msg" 1
    local mailfile
    mailfile=$(tempfile)
    debug_msg "borg list $repo2_path > $mailfile"
    borg list "$repo_path" > "$mailfile" 2>&1
    local rc=$?
    cat "$mailfile"
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Listing all backups" 1
        if [[ -n "${mail_recipient:-}" ]]; then
            log_status "[${GREEN}✓${NC}] E-Mail notification send to ${mail_recipient}" 1
            local subject="$(hostname) backup list - [${repo_name}]"
            debug_msg "mail -s \"$subject\" \"${mail_recipient}\" < \"$mailfile\""
            mail -s "$subject" "${mail_recipient}" < "$mailfile"
        fi
    else
        log_status "[${RED}✗${NC}] Listing all backups" 1
    fi
    rm -f "$mailfile"
}

backup_mount() {
    local archive="${1:-}"
    local mountpoint="${2:-${borg_mount_point:-/mnt/borgbackup_mount}}"
    set_variables "full"
    local msg
    if [[ -n "$archive" ]]; then
        msg="[ ] Mounting archive $archive"
    else
        msg="[ ] Mounting repository read-only"
    fi
    log_status "$msg"
    [[ ! -d "$mountpoint" ]] && debug_msg "mkdir -p \"$mountpoint\"" && mkdir -p "$mountpoint"
    if [[ -n "$archive" ]]; then
        debug_msg "borg mount \"${repo_path}::${archive}\" \"$mountpoint\""
        borg mount "${repo_path}::${archive}" "$mountpoint"
    else
        debug_msg "borg mount \"$repo_path\" \"$mountpoint\""
        borg mount "$repo_path" "$mountpoint"
    fi
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] ${msg:4}" 1
        echo "Unmount with: borg umount $mountpoint"
    else
        log_status "[${RED}✗${NC}] ${msg:4}" 1
        exit 2
    fi
}

# --- Repo functions ---
repo_init() {
    set_variables "full"
    local msg="[ ] Initializing repository"
    log_status "$msg"
    debug_msg "borg init -e repokey \"$repo_path\""
    borg init -e repokey "$repo_path"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Initializing repository" 1
    else
        log_status "[${RED}✗${NC}] Initializing repository" 1
        exit 2
    fi
}

repo_info() {
    set_variables "full"
    local msg="[ ] Retrieving repository info"
    log_status "$msg" 1
    borg info "$repo_path"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Retrieving repository info" 1
    else
        log_status "[${RED}✗${NC}] Retrieving repository info" 1
    fi
}

repo_health_check() {
    set_variables "full"
    local msg="[ ] Checking repository health"
    log_status "$msg"
    debug_msg "borg check \"$repo_path\""
    borg check "$repo_path"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Checking repository health" 1
    else
        log_status "[${RED}✗${NC}] Checking repository health" 1
        exit 2
    fi
}

repo_compact() {
    set_variables "full"
    local msg="[ ] Pruning old backups"
    log_status "$msg" 1
    run_cmd borg prune "$repo_path" -v --list \
        --keep-within="${borg_keep_within:-6m}" \
        --keep-daily="${borg_keep_daily:-7}" \
        --keep-weekly="${borg_keep_weekly:-12}" \
        --keep-monthly="${borg_keep_monthly:-12}" \
        --keep-yearly="${borg_keep_yearly:-3}"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Pruning old backups" 1
    else
        log_status "[${RED}✗${NC}] Pruning old backups" 1
        exit 2
    fi

    log_status "[ ] Compacting repository" 1
    local threshold="${borg_compact_threshold:-10}"
    debug_msg "Using compaction threshold: ${threshold}%"
    run_cmd borg compact "$repo_path" -v --threshold "$threshold" --progress
    rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Compacting repository" 1
        if [[ "$debug" == "1" ]]; then
            local repo_info
            repo_info=$(borg info "$repo_path")
            debug_msg "Repository status after compaction:\n${repo_info}"
        fi
    else
        log_status "[${RED}✗${NC}] Compacting repository" 1
        exit 2
    fi
}

repo_lock_check() {
    set_variables "full"
    local msg="[ ] Checking for lock"
    log_status "$msg"
    debug_msg "borg info \"$repo_path\""
    local repostatus
    repostatus=$(borg info "$repo_path" 2>&1)
    if [[ "${repostatus}" == *"Failed to create/acquire the lock"* ]]; then
        log_status "[${RED}✗${NC}] Checking for lock" 1
        return 1
    fi
    log_status "[${GREEN}✓${NC}] Checking for lock" 1
    return 0
}

repo_lock_break() {
    set_variables "full"
    local msg="[ ] Breaking repository lock"
    log_status "$msg"
    debug_msg "borg break-lock \"$repo_path\""
    borg break-lock "$repo_path"
    local rc=$?
    if [[ $rc -eq 0 ]]; then
        log_status "[${GREEN}✓${NC}] Breaking repository lock" 1
    else
        log_status "[${RED}✗${NC}] Breaking repository lock" 1
        exit 2
    fi
}

# --- Self-update functions ---
run_self_update() {
    self=${1}
    update_base=${2}
    log_status "[ ] Performing self-update" 1

    log_status "[ ] Downloading latest version..." 0
    debug_msg "wget --quiet --output-document=${0}.tmp ${update_base}/${self}"
    if ! wget --quiet --output-document="${0}.tmp" "${update_base}/${self}"; then
        log_status "[${RED}✗${NC}] Downloading latest version" 1
        log_status "[${RED}✗${NC}] Performing self-update" 1
        exit 1
    fi
    log_status "[${GREEN}✓${NC}] Downloading latest version" 1

    log_status "[ ] Downloading md5 sum..." 0
    debug_msg "wget --quiet --output-document=${0}.md5 ${update_base}${self}.md5"
    if ! wget --quiet --output-document="${0}.md5" "${update_base}${self}.md5"; then
        log_status "[${RED}✗${NC}] Downloading md5 sum" 1
        log_status "[${RED}✗${NC}] Performing self-update" 1
        exit 1
    fi
    log_status "[${GREEN}✓${NC}] Downloading md5 sum" 1

    log_status "[ ] Checking MD5 sum..." 0
    local web_md5=$(awk '{print $1}' < "${0}.md5")
    local local_md5=$(md5sum "$(realpath "${0}.tmp")" | awk '{print $1}')
    if [[ "$web_md5" != "$local_md5" ]]; then
        log_status "[${RED}✗${NC}] Checking MD5 sum" 1
        log_status "MD5 mismatch! Web: $web_md5 Local: $local_md5" 1
        rm "${0}.md5"
        log_status "[${RED}✗${NC}] Performing self-update" 1
        exit 1
    fi
    log_status "[${GREEN}✓${NC}] Checking MD5 sum" 1
    rm "${0}.md5"

    log_status "[ ] Copying over modes from old version..." 0
    local octal_mode=$(stat -c '%a' "$(realpath "${0}")")
    if ! chmod "$octal_mode" "${0}.tmp"; then
        log_status "[${RED}✗${NC}] Copying over modes from old version" 1
        log_status "[${RED}✗${NC}] Performing self-update" 1
        exit 1
    fi
    log_status "[${GREEN}✓${NC}] Copying over modes from old version" 1

    log_status "[ ] Start update process..." 0
    cat > updateScript.sh <<EOF
#!/bin/bash
if mv "$0.tmp" "$0"; then
    echo "Done. Update complete."
    rm \${0}
else
    echo "Failed. Please try again!"
    rm \${0}
fi
EOF
    debug_msg "Starting update process..."
    exec /bin/bash updateScript.sh
    # Hinweis: Die Zeile nach exec wird nie erreicht!
}

check_self_update() {
    self=$(basename "${0}")
    local update_base=https://raw.githubusercontent.com/cscholz/scripts/master/Linux/bash/generic/usr/sbin/
    local myself_web_version
    myself_web_version=$(curl -s -r 0-50 "${update_base}${self}" | head -2 | grep -E -o "([0-9.]{1,4}+\.[0-9.]{1,2})")
    log_status "Web version: ${myself_web_version}" 1
    myself_local_version=$(head -2 "${0}" | grep -E -o "([0-9.]{1,4}+)")
    log_status "Local version: ${myself_local_version}" 1
    if [[ "${myself_web_version}"  > "${myself_local_version}" ]]; then
        log_status "${YELLOW}New version v.${myself_local_version} to v.${myself_web_version} available.${NC}" 1
        read -p "Update [y/N] " -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            run_self_update "${self}" "${update_base}"
        fi
    else
        log_status "No update available: v.${myself_local_version}" 1
    fi
}

# --- Help ---
show_help() {
cat <<EOF
Usage:
  $0 [OPTION] <backup|repo> <subcommand> [Arguments...]

Commands:
  backup create <path> <suffix>    Create backup (optional path and suffix)
  backup delete <archive>          Delete backup
  backup list                      List backups
  backup mount <archive> <path>    Mount backup/repository (optional archive and path)

  repo init                        Initialize repository
  repo info                        Show repository info
  repo health-check                Check repository health
  repo compact                     Compact repository (prune + compact)
  repo lock-check                  Check for locks
  repo lock-break                  Break lock

Options:
  -v      Debug mode (show commands and variables in yellow)
  -u      Self-update
  --help  Show this help

Examples:
  $0 backup create /home
  $0 backup create /home custom_suffix
  $0 repo init
  $0 repo info
  $0 repo compact
  $0 backup mount 2025-06-08_14-30_custom
  $0 backup mount 2025-06-08_14-30_custom /mnt/my_mountpoint

Config:
The script reads configuration from two files:
- ${GLOBAL_CONFIG} (global, system-wide)
- ${USER_CONFIG} (user-specific, overrides global settings)

All settings from the user-specific config file override those from the global config.
EOF
}

# --- Main logic ---
if [[ $# -eq 0 || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

if [[ "$1" == "-u" ]]; then
    check_self_update
    exit 0
fi

case "$1" in
    backup)
        case "$2" in
            create)       shift 2; backup_create "$@" ;;
            delete)       shift 2; backup_delete "$@" ;;
            list)         shift 2; backup_list_and_mail "$@" ;;
            mount)        shift 2; backup_mount "$@" ;;
            *)            show_help; exit 1 ;;
        esac
        ;;
    repo)
        case "$2" in
            init)         shift 2; repo_init "$@" ;;
            info)         shift 2; repo_info "$@" ;;
            health-check) shift 2; repo_health_check "$@" ;;
            compact)      shift 2; repo_compact "$@" ;;
            lock-check)   shift 2; repo_lock_check "$@" ;;
            lock-break)   shift 2; repo_lock_break "$@" ;;
            *)            show_help; exit 1 ;;
        esac
        ;;
    *)
        show_help
        exit 1
        ;;
esac

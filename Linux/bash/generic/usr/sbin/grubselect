#!/usr/bin/env bash
Version=20190607.01

# Description:  Make full text search easy

set -o pipefail
# -e: exit immidiately when a command fails. If piped check only the last command error code.
#     Use ||true for commands allowed to fail.
# -u: treat unset variable as an error and exit immidiately
# -o pipefail: same as -e but for all commands in a pipe.
# -x: debug option

run_self_update() {
  #######################################
  # Download a new copy of myself and replace myself with it
  # Arguments:
  #   $1 $0 (script name)
  #   $2 update where the new version is stored
  # Returns:
  #   None
  #######################################

  self=${1}

  # The base location from where to retrieve new versions of this script
  update_base=${2}

  echo "> Performing self-update..."

  # Download new version
  echo -n "> Downloading latest version..."
  if ! wget --quiet --output-document="${0}.tmp" "${update_base}/${self}" ; then
    echo "Failed: Error while trying to wget new version!"
    echo "File requested: ${update_base}/${self}"
    exit 1
  fi
  echo "Done."

  # Download MD5 of update
  echo -n "> Downloading md5 sum..."
  if ! wget --quiet --output-document="${0}.md5" "${update_base}${self}.md5" ; then
    echo "Failed: Error while trying to wget md5sum!"
    echo "File requested: ${update_base}${self}.md5"
    exit 1
  fi
  echo "Done."

  # Checking MD5 sum
  echo -n "> Checking MD5 sum..."
  web_md5=$(cat ${0}.md5 | awk '{print $1}')
  local_md5=$(md5sum $(realpath ${0}.tmp) | awk '{print $1}')
  if [[ $web_md5 != "${local_md5}" ]]; then
    echo "Failed. Abort!"
    echo "${web_md5} / ${local_md5}"
    rm "${0}.md5"
    exit 0
  fi
  echo "Ok"
  rm "${0}.md5"

  # Copy over modes from old version
  OCTAL_MODE=$(stat -c '%a' $(realpath ${0}))
  if ! chmod ${OCTAL_MODE} "${0}.tmp" ; then
    echo "Failed: Error while trying to set mode on ${0}.tmp."
    exit 1
  fi

  # Spawn update script
  cat > updateScript.sh << EOF
#!/bin/bash
# Overwrite old file with new
if mv "${0}.tmp" "${0}"; then
  echo "Done. Update complete."
  rm \${0}
else
  echo "Failed. Please try again!"
  rm \${0}
fi
EOF

  echo -n "> Start update process..."
  exec /bin/bash updateScript.sh
}

check_self_update() {
  #######################################
  # Check for a new version of myself
  # Arguments:
  #   $1 $0 (script name)
  # Returns:
  #   None
  #######################################

  self=$(basename "${0}")
  # The base location from where to retrieve new versions of this script
  local update_base=https://raw.githubusercontent.com/cscholz/scripts/master/Linux/bash/generic/usr/sbin/

  local myself_web_version
  myself_web_version=$(curl -s -r 0-50 "${update_base}${self}" | head -2 | egrep -o "([0-9.]{1,4}+\.[0-9.]{1,2})" )
  echo "Web:" "${myself_web_version}"
  myself_local_version=$(head -2 "${0}"  | egrep -o "([0-9.]{1,4}+)")
  echo "Local:" "${myself_local_version}"
  if [[ "${myself_web_version}"  > "${myself_local_version}" ]]; then
    echo -e "\033[40;1;33mNew version (v.${myself_local_version} -> v.${myself_web_version}) available.\033[0m"
          read -p "Update (y/N) " -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      run_self_update "${self}" "${update_base}"
    fi
  else
          echo "No update available (v.${myself_local_version})"
        fi
}

function grub-ident {
  if [ -f "/boot/grub/grub.cfg" ]; then
    echo "> Grub v1 found!"
    grubV="grub"
    file="/boot/grub/grub.cfg"
    grub_reboot=$(which grub-reboot)
    grub_editenv=$(which grub-editenv)
    update_grub=$(which update-grub)
    grub_reboot=$(which grub-reboot)
    grub_set_default=$(which grub-set-default)
    grub_editenv=$(which grub-editenv)
    defEntry=$(grub-editenv list | cut -d "=" -f 2)
  elif  [ -f "/boot/grub2/grub.cfg" ]; then
    echo "> Grub v2 found!"
    grubV="grub2"
    file="/boot/grub2/grub.cfg"
    grub_reboot=$(which grub2-reboot)
    grub_editenv=$(which grub2-editenv)
    update_grub="$(which grub2-mkconfig) -o $file"
    grub_reboot=$(which grub2-reboot)
    grub_set_default=$(which grub2-set-default)
    grub_editenv=$(which grub2-editenv)
    defEntry=$(grub2-editenv list | cut -d "=" -f 2)
  else
    echo "No suitable grub found. Abort!"
    exit
  fi
}

main() {
  for i in "$@" ; do
    if [[ "${i}" == "-V" ]] ; then
       echo  "$(basename "${0}")" "${Version}"

       echo "Copyright (C) 2017 Christian Scholz. Alle Rechte vorbehalten."
       echo "Dieses Script ist unter GPL v.2. veröffentlicht"
       echo
       echo "Dieses Script wird unter Ausschluss vom Gewährleistung und Garantie bereitgestellt, soweit dies durch Gesetze ermöglicht wird."
       exit 1
    fi
    if [[ "${i}" == "-u" ]] ; then
      check_self_update
      exit 1
    fi    
  done

  
  # choice counter
  i=0
  # entry counter
  j=0
  
  # counter for sub entries 0/1
  submenu=0
  
  grub-ident
  
  echo -e "Choice\tEntry\tName"
  while read -r line
  do
    if [[ $line == "submenu"* ]]; then
      submenu=1
      k=$j">"
      j=0
    fi
  
    if [[ $submenu == 1 ]]; then
      entryid=$k$j
  
      # counter for open and close sub brackets {}
      if [[ $line == *"{"* ]]; then
        let "h=h+1"
      fi
      if [[ $line == *"}"* ]]; then
        let "h=h-1"
      fi
    else
      k=
    fi
  
    # reset submenu when subenu entry close
    if [[ $h == 0 ]]; then
      submenu=0
    fi
  
    if [[ $line == *"menuentry '"* ]]; then
  #    echo $line |awk -F\' '/menuentry / {print $2}'
  #    echo -e "$i \t$k$j \t$(echo $line |cut -d "'" -f 2)"
  
      #Grub
      if [ "$grubV" == "grub" ]; then
        if [ "$k$j" == "$defEntry" ]; then
           echo -e "$i (*) \t$k$j \t$(echo "${line}" |cut -d "'" -f 2)"
        else
           echo -e "$i \t$k$j \t$(echo "${line}" |cut -d "'" -f 2)"
        fi
      fi
  
      # Grub2
      if [ "$grubV" == "grub2" ]; then
        if [ "$(echo "${line}" | cut -d "'" -f 2)" == "$defEntry" ]; then
           echo -e "$i (*) \t$k$j \t$(echo "${line}" |cut -d "'" -f 2)"
        else
           echo -e "$i \t$k$j \t$(echo "${line}" |cut -d "'" -f 2)"
        fi
      fi
  
      array[$i]=$k$j
      let "j=j+1"
      let "i=i+1"
    fi
  done < "$file"
  
  echo -n "Your choice: "
  read -r sel_entry
  
  read -r -p "Boot kernel once or permanent? [o/p] " response
  case $response in
      [oO])
          $grub_reboot "${array[$sel_entry]}"
          $grub_editenv list
          ;;
      [pP])
          sed -i 's/GRUB_DEFAULT=.*/GRUB_DEFAULT=saved/g' /etc/default/grub
          $update_grub
          $grub_set_default "${array[$sel_entry]}"
          $grub_editenv list
          ;;
      *)
          echo "Wrong selection. Aborted."
          exit
          ;;
  esac
}

main "$@"

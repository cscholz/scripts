#!/usr/bin/env bash
Version=20100607.01

# Description:  Script could be referenzed from other scripts to check if a required package is installed.
# It checks if a package is installed. If not it asks if it should be installed.

set -u
# -e: exit immidiately when a command fails. If piped check only the last command error code.
#     Use ||true for commands allowed to fail.
# -u: treat unset variable as an error and exit immidiately
# -o pipefail: same as -e but for all commands in a pipe.
# -x: debug option

run_self_update() {
  #######################################
  # Download a new copy of myself and replace myself with it
  # Arguments:
  #   $1 $0 (script name)
  #   $2 update where the new version is stored
  # Returns:
  #   None
  #######################################

  self=${1}

  # The base location from where to retrieve new versions of this script
  update_base=${2}

  echo "> Performing self-update..."

  # Download new version
  echo -n "> Downloading latest version..."
  if ! wget --quiet --output-document="${0}.tmp" "${update_base}/${self}" ; then
    echo "Failed: Error while trying to wget new version!"
    echo "File requested: ${update_base}/${self}"
    exit 1
  fi
  echo "Done."

  # Download MD5 of update
  echo -n "> Downloading md5 sum..."
  if ! wget --quiet --output-document="${0}.md5" "${update_base}${self}.md5" ; then
    echo "Failed: Error while trying to wget md5sum!"
    echo "File requested: ${update_base}${self}.md5"
    exit 1
  fi
  echo "Done."

  # Checking MD5 sum
  echo -n "> Checking MD5 sum..."
  web_md5=$(cat "${0}".md5 | awk '{print $1}')
  local_md5=$(md5sum $(realpath ${0}.tmp) | awk '{print $1}')
  if [[ $web_md5 != "${local_md5}" ]]; then
    echo "Failed. Abort!"
    echo "${web_md5} / ${local_md5}"
    rm "${0}.md5"
    exit 0
  fi
  echo "Ok"
  rm "${0}.md5"

  # Copy over modes from old version
  OCTAL_MODE=$(stat -c '%a' $(realpath ${0}))
  if ! chmod "${OCTAL_MODE}" "${0}.tmp" ; then
    echo "Failed: Error while trying to set mode on ${0}.tmp."
    exit 1
  fi

  # Spawn update script
  cat > updateScript.sh << EOF
#!/bin/bash
# Overwrite old file with new
if mv "${0}.tmp" "${0}"; then
  echo "Done. Update complete."
  rm \${0}
else
  echo "Failed. Please try again!"
  rm \${0}
fi
EOF

  echo -n "> Start update process..."
  exec /bin/bash updateScript.sh
}

check_self_update() {
  #######################################
  # Check for a new version of myself
  # Arguments:
  #   $1 $0 (script name)
  # Returns:
  #   None
  #######################################

  self=$(basename "${0}")
  # The base location from where to retrieve new versions of this script
  local update_base=https://raw.githubusercontent.com/cscholz/scripts/master/Linux/bash/generic/usr/sbin/

  local myself_web_version
  myself_web_version=$(curl -s -r 0-50 "${update_base}${self}" | head -2 | egrep -o "([0-9.]{1,4}+\.[0-9.]{1,2})" )
  echo "Web:" "${myself_web_version}"
  myself_local_version=$(head -2 "${0}"  | egrep -o "([0-9.]{1,4}+)")
  echo "Local:" "${myself_local_version}"
  if [[ "${myself_web_version}"  > "${myself_local_version}" ]]; then
    echo -e "\033[40;1;33mNew version (v.${myself_local_version} -> v.${myself_web_version}) available.\033[0m"
          read -p "Update (y/N) " -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      run_self_update "${self}" "${update_base}"
    fi
  else
          echo "No update available (v.${myself_local_version})"
        fi
}

tempfile() {
    tempprefix=$(basename "$0")
    mktemp /tmp/${tempprefix}.XXXXXX
}

main() {
  for i in "$@" ; do
    if [[ "${i}" == "-V" ]] ; then
       echo  "$(basename "${0}")" "${Version}"

       echo "Copyright (C) 2017 Christian Scholz. Alle Rechte vorbehalten."
       echo "Dieses Script ist unter GPL v.2. veröffentlicht"
       echo
       echo "Dieses Script wird unter Ausschluss vom Gewährleistung und Garantie bereitgestellt, soweit dies durch Gesetze ermöglicht wird."
       exit 1
    fi
    if [[ "${i}" == "-u" ]] ; then
      check_self_update
      exit 1
    fi    
  done


PARAM=""
TIMEOUT="5"
RECIPIENT="postmaster@o-o-s.de"
TEMP=$(tempfile)

trap "rm -f '"${TEMP}"'" exit

if [ "$1" = "" ] || [ "$2" = "" ]; then
        echo "$0 domain.tld port"
        exit 1
fi

# identitfy port and set starttls
if [ $2 = "25" ] || [ $2 = "465" ] || [ $2 = "587" ]; then
  PARAM="-starttls smtp"
  PROTOCOL="SMTPs"
fi

if [ $2 = "21" ]; then
  PARAM="-starttls ftp"
  PROTOCOL="FTPs"
fi

if [ $2 = "993" ]; then
  PROTOCOL="IAMPs"
fi

if [ $2 = "995" ]; then
  PROTOCOL="POP3s"
fi

if [ $2 = "443" ]; then
  PROTOCOL="HTTPs"
fi

TLSA=$(dig +nocmd +noall +answer TLSA _$2._tcp.$1. +short | tr '[:upper:]' '[:lower:]')

if [ -z "$TLSA" ]; then
  echo "no TLSA record"
  exit
fi


# quit if remote service is not available
sleep 1 | telnet $1 $2 > "${TEMP}"
con_status=$(grep -i connected "${TEMP}" | tr '[:upper:]' '[:lower:]')
if [[ "$con_status" == *connected* ]]; then
  echo -e Remote Service: $1:$2 \('\E[40;1;32m'"\033\OK\033[0m)"
else
  echo -e Remote Service: $1:$2 \('\E[40;1;31m'"\033\DOWN\033[0m)"
  exit
fi
> "${TEMP}"

# _25._tcp_domain.tld TLSA 3 0 1 ADEF...
#                          ^ ^ ^
#                          | | - 0: full, 1 SHA256, 2 SHA512
#                          | - 0: Cert, 1 SPKI
#                          - 0: Certificate Authority Constraint, 1: PKIX-EE: Service Certificate Constraint,
#                            2: Trust Anchor Assertion, 3: Domain Issued Certificate

#_25._tcp_domain.tld TLSA 3 0 1 ADEF...
if [ $(echo $TLSA | awk '{print $2}') = "0" ] && [ $(echo $TLSA | awk '{print $3}') = "1" ]; then
  cert=$(timeout $TIMEOUT openssl s_client -showcerts -CApath /etc/ssl/certs/ $PARAM -servername $1 -connect $1:$2 < /dev/null | openssl x509 -outform DER | openssl sha256 |grep stdin | awk '{print $2}' | tr '[:upper:]' '[:lower:]')
fi

#_25._tcp_domain.tld TLSA 3 0 2 ADEF...
if [ $(echo $TLSA |  awk '{print $2}') = "0" ] && [ $(echo $TLSA | awk '{print $2}') = "2" ]; then
  cert=$(timeout $TIMEOUT openssl s_client -showcerts -CApath /etc/ssl/certs/ $PARAM -servername $1 -connect $1:$2 < /dev/null | openssl x509 -outform DER | openssl sha512 |grep stdin | awk '{print $2}' | tr '[:upper:]' '[:lower:]')
fi


#_25._tcp_domain.tld TLSA 3 1 1 ADEF...
if [ $(echo $TLSA |  awk '{print $2}') = "1" ] && [ $(echo $TLSA | awk '{print $2}') = "1" ]; then
  cert=$(timeout $TIMEOUT openssl s_client $PARAM -servername $1 -connect $1:$2 </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | sha256sum | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
fi

#_25._tcp_domain.tld TLSA 3 1 2 ADEF...
if [ $(echo $TLSA |  awk '{print $2}') = "1" ] && [ $(echo $TLSA | awk '{print $2}') = "2" ]; then
  cert=$(timeout $TIMEOUT openssl s_client $PARAM -servername $1 -connect $1:$2 </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | sha512sum | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
fi

# compare both fingerprints and send an email in the case of an mismatch
if [ $(echo $TLSA | awk '{print $4$5}') = "$cert" ]; then
  echo -e '[\E[40;1;32m'"\033\ OK\033[0m ] $1"
else
  echo -e '[\E[40;1;31m'"\033\ Fail\033[0m ] $1"
  openssl s_client -servername $1 -connect $1:$2 $PARAM -showcerts < /dev/null | openssl x509 -outform DER > /tmp/$1.cer

  echo "DNS record" >> "${TEMP}"
  echo "---------------------" >> "${TEMP}"
  timeout 5 dig +nocmd +noall +answer TLSA _$2._tcp.$1. | tr '[:upper:]' '[:lower:]' >> "${TEMP}"
  echo "" >> "${TEMP}"
  echo "Active Zertifikate" >> "${TEMP}"
  echo "---------------------" >> "${TEMP}"
  echo "Certificate: $cert" >> "${TEMP}"
  mutt $RECIPIENT -s "[$1] - $PROTOCOL TLSA error" -a /tmp/$1.cer < "${TEMP}"
fi  
}

main "$@"
